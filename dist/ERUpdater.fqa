{"type":"com.fibaro.genericDevice","name":"ERUpdater","apiVersion":"1.3","files":[{"type":"lua","name":"main","content":"--%%name:ERUpdater\n--%%type:com.fibaro.genericDevice\n--%%desktop:true\n--%%uid:f1e8b33e2-3c4b-2c5a-9f6a-7b8c2369e1f2c\n--%%save:dist/ERUpdater.fqa\n--%%u:{label=\'l1\', text=\"ER Updater\"}\n--%%u:{select=\'version\', options={}, onToggled=\'versionSelected\'}\n--%%u:{select=\'qa\', options={}, onToggled=\'qaSelected\'}\n--%%u:{label=\'sel\', text=\'\'}\n--%%u:{{button=\'upd\', text=\"Update\", onReleased=\'updateClicked\'},{button=\'ref\', text=\"Refresh\", onReleased=\'refreshClicked\'},{button=\'install\', text=\"Install\", onReleased=\'installClicked\'}}\n--%%u:{label=\'msg\', text=\'\'}\n--%%offline:true\n\nlocal VERSION = \"0.0.48\"\nlocal ER_UUID = \"f1e8b22e2-3c4b-4d5a-9f6a-7b8c2360e1f2c\"\nlocal fmt = string.format\n\nfunction QuickApp:onInit()\n  self:debug(self.name,self.id)\n  self:updateView(\'l1\',\"text\",fmt(\"QA Manager v%s\",VERSION))\n  self:updateView(\'sel\',\"text\",\"\")\n  self:updateView(\'msg\',\"text\",\"\")\n  setInterval(function() self:refreshClicked() end, 60*60*1000) -- Refresh every hour\n  self:refreshClicked()\nend\n\nfunction QuickApp:refreshClicked()\n  self:git_getRepo(function(ok,data)\n    if not ok then \n      self:ERROR(self:message(\"Failed to get QA manifest: %s\",data))\n      return\n    end\n    local repos = json.decode(data)\n    print(data)\n  end)\n  local res = api.get(\"/devices?property=[quickAppUuid,\"..ER_UUID..\"]\") or {}\n  local ers = {{type=\'option\', text=\"---\", value=\"\"}}\n  for _,q in ipairs(res) do ers[#ers+1] = {type=\'option\', text=fmt(\"%s: %s\",q.id,q.name),value=tostring(q.id)} end\n  self:updateView(\'qa\',\'options\',ers)\n  self:git_getQATags(\'jangabrielsson\',\'EventRunner6\',function(ok,data)\n    local vers = {{type\'option\', text=\"---\", value=\"\"}}\n    if ok then\n      local tags = json.decode(data)\n      for _,t in ipairs(tags) do \n        vers[#vers+1] = {type=\'option\', text=t.name, value=t.name} \n      end\n    end\n    self:updateView(\'version\',\'options\',vers)\n  end)\nend\n\nlocal qa,version = nil,nil\nfunction QuickApp:installClicked()\n  if not version then\n    self:ERROR(\"Please select a version\")\n    return\n  end\n  self:git_getQA(\'jangabrielsson\',\'EventRunner6\',\"dist/EventRunner6.fqa\",version,function(ok,data)\n    if not ok then \n      self:ERROR(self:message(\"Failed to get EventRunner6 v%s\",version))\n      return\n    end\n    data = json.decode(data)\n    local res,code = api.post(\"/quickApp/\",data)\n    if code > 202 then \n      self:ERROR(self:message(\"Failed to install EventRunner6 %s %s\",version,data))\n    else\n      self:INFO(self:message(\"Installed EventRunner6 v%s as ID %s.\",version,res.id))\n      self:refreshClicked()\n    end\n  end)\nend\n\nfunction QuickApp:versionSelected(ev)\n  version = ev.values[1]\n  self:updateView(\"sel\",\'text\',fmt(\"Selected: %s / %s\",qa or \"?\",version or \"?\"))\nend\n\nfunction QuickApp:qaSelected(ev)\n  qa = tonumber(ev.values[1])\n  self:updateView(\"sel\",\'text\',fmt(\"Selected: %s / %s\",qa or \"?\",version or \"?\"))\nend\n\nfunction QuickApp:updateClicked(ev)\n  if not qa or not version then\n    self:ERROR(self:message(\"Please select both EventRunner6 and version\"))\n    return\n  end\n  self:updateMe(qa, nil, version)\nend\n\nfunction QuickApp:INFO(...) self:debug(fmt(...)) end\nfunction QuickApp:ERROR(...) self:error(fmt(...)) end\n\nfunction QuickApp:updateMe(id, myVersion, toVersion)\n  local id = tonumber(id)\n  if id == nil then\n    self:error(\"No valid EventRunner6 ID\")\n    return\n  end\n  self:git_getQA(\'jangabrielsson\',\'EventRunner6\',\"dist/EventRunner6.fqa\",toVersion,function(ok,data)\n    if ok then\n      self:INFO(self:message(\"Found version v%s\", toVersion))\n      local fqa = json.decode(data)\n      local files,main = fqa.files,nil\n      for i,f in ipairs(files) do if f.isMain then main = i break end end\n      if not main then\n        self:ERROR(self:message(\"No main file found in EventRunner6 v%s\",toVersion))\n        return\n      end\n      table.remove(files,main) -- skip main\n      local res,code = api.put(\"/quickApp/\"..id..\"/files\", files)\n      if code > 202 then\n        self:ERROR(self:message(\"Failed to update EventRunner6 %s files\",toVersion))\n        return\n      end\n      self:INFO(self:message(\"Updated %d files\",#files))\n    else\n      self:ERROR(self:message(\"Failed to get EventRunner6 v%s\",toVersion))\n      -- Send error response\n    end\n  end)\nend\n\nfunction QuickApp:git_getRepo(cb)\n  net.HTTPClient():request(\"https://raw.githubusercontent.com/jangabrielsson/plua/refs/heads/main/docs/QAs.json\",{\n    options = {checkCertificate = false, timeout=20000},\n    success = function(response)\n      if response and response.status == 200 then\n        cb(true,response.data)\n      else cb(false,response and response.status or \"nil\") end\n    end,\n    error = function(err) cb(false,err) end\n  })\nend\n\nfunction QuickApp:git_getQA(user,repo,name,tag,cb)\n  local url = urlencode(fmt(\"%s/%s/%s/%s\",user,repo,tag,name))\n  url = \"https://raw.githubusercontent.com/\"..url\n  net.HTTPClient():request(url,{\n    options = {checkCertificate = false, timeout=20000},\n    success = function(response)\n      if response and response.status == 200 then\n        cb(true,response.data)\n      else cb(false,response and response.status or \"nil\") end\n    end,\n    error = function(err) cb(false,err) end\n  })\nend\n\nfunction QuickApp:git_getQATags(user,repo,cb)\n  local url = fmt(\"https://api.github.com/repos/%s/%s/tags\",user,repo)\n  net.HTTPClient():request(url,{\n    options = {checkCertificate = false, timeout=20000},\n    success = function(response)\n      if response and response.status == 200 then\n        cb(true,response.data)\n      else cb(false,response and response.status or \"nil\") end\n    end,\n    error = function(err) cb(false,err) end\n  })\nend\n\nfunction QuickApp:message(fm,...)\n  local args,str = {...},fm or \"\"\n  if #args > 0 then str = fmt(fm,...) end\n  self:updateView(\'msg\',\'text\',str)\n  return str\nend\n\nfunction urlencode(str) -- very useful\n  if str then\n    str = str:gsub(\"\\n\", \"\\r\\n\")\n    str = str:gsub(\"([^%w %-%_%.%~])\", function(c) return (\"%%%02X\"):format(string.byte(c)) end)\n    str = str:gsub(\" \", \"%%20\")\n  end\n  return str\nend","isMain":true,"isOpen":false}],"initialInterfaces":[],"initialProperties":{"apiVersion":"1.3","buildNumber":1,"deviceRole":"Other","quickAppUuid":"f1e8b33e2-3c4b-2c5a-9f6a-7b8c2369e1f2c","quickAppVariables":[],"supportedDeviceRoles":["Other"],"typeTemplateInitialized":true,"uiCallbacks":[{"name":"version","callback":"versionSelected","eventType":"onToggled"},{"name":"qa","callback":"qaSelected","eventType":"onToggled"},{"name":"upd","callback":"updateClicked","eventType":"onReleased"},{"name":"upd","callback":"","eventType":"onLongPressDown"},{"name":"upd","callback":"","eventType":"onLongPressReleased"},{"name":"ref","callback":"refreshClicked","eventType":"onReleased"},{"name":"ref","callback":"","eventType":"onLongPressDown"},{"name":"ref","callback":"","eventType":"onLongPressReleased"},{"name":"install","callback":"installClicked","eventType":"onReleased"},{"name":"install","callback":"","eventType":"onLongPressDown"},{"name":"install","callback":"","eventType":"onLongPressReleased"}],"uiView":[{"type":"horizontal","components":[{"type":"label","name":"l1","style":{"weight":"1.0"},"text":"ER Updater","visible":true}],"style":{"weight":"1.0"}},{"type":"horizontal","components":[{"type":"select","name":"version","value":"","eventBinding":{"onToggled":[{"type":"deviceAction","params":{"actionName":"UIAction","args":["onToggled","version","$event.value"]}}]},"options":[],"selectionType":"single","style":{"weight":"1.0"},"text":"","values":[],"visible":true}],"style":{"weight":"1.0"}},{"type":"horizontal","components":[{"type":"select","name":"qa","value":"","eventBinding":{"onToggled":[{"type":"deviceAction","params":{"actionName":"UIAction","args":["onToggled","qa","$event.value"]}}]},"options":[],"selectionType":"single","style":{"weight":"1.0"},"text":"","values":[],"visible":true}],"style":{"weight":"1.0"}},{"type":"horizontal","components":[{"type":"label","name":"sel","style":{"weight":"1.0"},"text":"","visible":true}],"style":{"weight":"1.0"}},{"type":"horizontal","components":[{"type":"button","name":"upd","eventBinding":{"onLongPressDown":[{"type":"deviceAction","params":{"actionName":"UIAction","args":["onLongPressDown","upd"]}}],"onLongPressReleased":[{"type":"deviceAction","params":{"actionName":"UIAction","args":["onLongPressReleased","upd"]}}],"onReleased":[{"type":"deviceAction","params":{"actionName":"UIAction","args":["onReleased","upd"]}}]},"style":{"weight":"0.25"},"text":"Update","visible":true},{"type":"button","name":"ref","eventBinding":{"onLongPressDown":[{"type":"deviceAction","params":{"actionName":"UIAction","args":["onLongPressDown","ref"]}}],"onLongPressReleased":[{"type":"deviceAction","params":{"actionName":"UIAction","args":["onLongPressReleased","ref"]}}],"onReleased":[{"type":"deviceAction","params":{"actionName":"UIAction","args":["onReleased","ref"]}}]},"style":{"weight":"0.25"},"text":"Refresh","visible":true},{"type":"button","name":"install","eventBinding":{"onLongPressDown":[{"type":"deviceAction","params":{"actionName":"UIAction","args":["onLongPressDown","install"]}}],"onLongPressReleased":[{"type":"deviceAction","params":{"actionName":"UIAction","args":["onLongPressReleased","install"]}}],"onReleased":[{"type":"deviceAction","params":{"actionName":"UIAction","args":["onReleased","install"]}}]},"style":{"weight":"0.25"},"text":"Install","visible":true}],"style":{"weight":"1.0"}},{"type":"horizontal","components":[{"type":"label","name":"msg","style":{"weight":"1.0"},"text":"","visible":true}],"style":{"weight":"1.0"}}],"useEmbededView":true,"useUiView":true,"userDescription":"","viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_52"},"sections":{"items":[{"type":"vertical","components":[{"type":"label","name":"l1","style":{"weight":"1.2"},"text":"ER Updater","visible":true},{"type":"space","style":{"weight":"0.5"}}],"style":{"weight":"1.2"}},{"type":"vertical","components":[{"type":"select","name":"version","options":[],"selectionType":"single","style":{"weight":"1.2"},"text":"","values":[],"visible":true},{"type":"space","style":{"weight":"0.5"}}],"style":{"weight":"1.2"}},{"type":"vertical","components":[{"type":"select","name":"qa","options":[],"selectionType":"single","style":{"weight":"1.2"},"text":"","values":[],"visible":true},{"type":"space","style":{"weight":"0.5"}}],"style":{"weight":"1.2"}},{"type":"vertical","components":[{"type":"label","name":"sel","style":{"weight":"1.2"},"text":"","visible":true},{"type":"space","style":{"weight":"0.5"}}],"style":{"weight":"1.2"}},{"type":"vertical","components":[{"type":"horizontal","components":[{"type":"button","name":"upd","style":{"weight":"0.33"},"text":"Update","visible":true},{"type":"button","name":"ref","style":{"weight":"0.33"},"text":"Refresh","visible":true},{"type":"button","name":"install","style":{"weight":"0.33"},"text":"Install","visible":true}],"style":{"weight":"1.2"}},{"type":"space","style":{"weight":"0.5"}}],"style":{"weight":"1.2"}},{"type":"vertical","components":[{"type":"label","name":"msg","style":{"weight":"1.2"},"text":"","visible":true},{"type":"space","style":{"weight":"0.5"}}],"style":{"weight":"1.2"}}]}},"head":{"title":"quickApp_device_52"}}}}}